#!/usr/bin/env node

const ignore = require("ignore");
const minimist = require("minimist");
const fs = require("fs");
const path = require("path");
const childProcess = require("child_process");

const shellcheckIgnore = ignore();

if (fs.existsSync(".shellcheckignore")) {
	shellcheckIgnore.add(fs.readFileSync(".shellcheckignore").toString());
}

const argv = minimist(process.argv.slice(2));

const checkable = shellcheckIgnore.filter(
	argv._.map((p) => path.relative(process.cwd(), p))
);

const files = [];

function isExecutable(file) {
	try {
		fs.accessSync(file, fs.constants.X_OK);
		return true;
	} catch (error) {
		if (error.code === "EACCES") {
			return false;
		} else {
			throw error;
		}
	}
}

for (const file of checkable) {
	if (file.match(/\.(bash|sh)$/)) {
		files.push(file);
		continue;
	}

	if (!isExecutable(file)) {
		continue;
	}

	const contents = fs.readFileSync(file).toString();

	if (contents.startsWith("!#")) {
		continue;
	}

	const index = contents.indexOf("\n");
	const shebang = index === -1 ? contents : contents.slice(0, index);

	if (shebang.match(/bash|sh/)) {
		files.push(file);
	}
}

if (files.length === 0) {
	console.log("No matched files");
	process.exit(0);
}

const shellcheck = childProcess.spawnSync("shellcheck", files, {
	stdio: "inherit",
});

if (shellcheck.status) {
	process.exit(shellcheck.status);
}
